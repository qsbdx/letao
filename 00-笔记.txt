Day01
    一、版本控制系统
    1、webStorm 有VCS功能 -> 本地历史
        缺点：不能进行多人协作

    2、概念：
        版本控制系统（Version Control System）:是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。

    3、分类：
        3.1 本地版本控制系统
           // 记录版本的不同变化，保证内容不会丢失
           ** 缺点：不能进行多人协作

        3.2 集中式版本控制系統（SVN集中式代表）
            // 有一台远程的中央服务器，专门用于管理代码
            // 所有的用户电脑都是从中央服务器上传和下载代码
            // 依赖与网络环境，如果连不上中央服务器，就无法提交和获取代码
            ** 优点：1、解决了多人协作的开发问题
            ** 缺点：1、特别依赖中央服务器
                     2、特别依赖网络        

        3.3 分布式版本控制系统（git分布式代表）
            // 需要一台服务器作为代码仓库
            // 每个用户电脑都是一个服务器（代码仓库），并且和代码仓库是镜像的，用户修改和获取代码都是提交到自己的服务器当中。
            // 不需要网络就可以进行工作
            // 当连接网络时，用户可以选择将自己的服务器与代码仓库进行同步
            ** 优点：1、解决了多人协作的开发问题
                     2、不是特别依赖远程仓库
                     3、不是特别依赖网络



    二、git基本入门
    1、git三个区

        工作区 ：我们书写代码的地方，工作的目录就叫工作区

        暂存区 ：暂时存储的区域，在git中，代码无法直接从工作区提交到仓库区，而是需要先从工作区添加到暂存区，然后才能从暂存区提交到仓库区。暂存区的目的是避免误操作

        仓库区 ：将保存在暂存区域的内容永久转储到 Git 仓库中，生成版本号。生成版本号之后，就可以任何的回退到某一个具体的版本  



    三、git初体验
    1、命令(基础提交过程 1 -> 7，第一次操作会报错)
        1.1 git init： 初始化仓库，新建一个隐藏的.get 文件夹

        1.2 git status： 查看文件状态
            git status -s：查看文件状态(简化输出)
            // 红色：表示文件在工作区
            // 绿色：表示文件在暂存区

        1.3 git add 文件名                 将文件从工作区提交到暂存区
            git add .                      将当前目录下的所有文件都提交到暂存区(git add -A//git add --all )
            git commit -a -m "快速提交"     (只能提交已经暂存过的文件) 快速将内容直接提交到工作区

        1.4 git commit -m "提交说明"： 将文件内容从暂存区提交到仓库区
            git commit 没加后面内容，会进入vi编辑器模式，:q! 退出
 
        1.5 git log             查看版本号(日志)
            git log --oneline    简化版本号输出(日志输出)
            git reflog          可以查看所有日志信息

        1.6 git config --list： 查看当前用户配置
            (** 第一次安装需要配置用户名和邮箱)

        1.7 git config --global user.name "你的用户名"
            git config --global user.email "你的邮箱"
            (** 重置个人账号)(了解)


        1.8 查看日志过多，ctrl+c退出

        1.9 git commit --amend -m "修改提交信息"：只允许修改最近的一次



    2、三个区域
        2.1 工作区：当前文件区域（代码）
            index.html

        2.2 暂存区
        2.3 仓库区
        ** 2.2 2.3 两个区共同存在于隐藏的.get文件中

    3、详解命令
        3.1 比较（多为绿，少为红）
            git diff                  比较 工作区 和 暂存区
            git diff --cached         比较 暂存区 和 仓库区 
            git HEAD                  比较 工作区 和 仓库区  
            git logo --online         查看日志（简化输出）
            git diff 版本号1 版本号2   比较版本的不同（2多为绿，2少为红）

        3.2 重置
            git reset --hard 最近的版本号    版本重置（作用：避免误操作，可以随时回退到已经存储的版本中）
            git reset --hard head~0         0最近的版本

            git reset --soft 版本号          只重置仓库区
            git reset --mixed 版本号         重置仓库区和暂存区
            git reset --hard 版本号          重置工作区，暂存区和仓库区（会修改工作区的代码）                     

        3.3 git忽略文件
            1. 在 仓库的根目录(.git 同级文件夹)下新建一个 .gitignore的文件 (随意一个编辑器都可以新建)
            2. 在 .gitignore文件中写入想要忽视的文件名
            3. 如果想要忽略文件夹，直接写文件夹名就可以

    四、git分支操作
    1、特性：分支之间是独立的，不会互相影响

    2、为什么要有分支？
        2.1 如果一半的代码不提交，代码可能会丢失
        2.2 如果一半的代码提交了，报错的代码会影响别人的开发
        2.3 需要分支，来保证功能开发的独立性        

    3、分支的基本操作
        3.1 每次 commit 提交，都会在仓库区生成一个新的版本
        3.2 在第一次生成版本后，会自动创建一个 master 分支，指向当前版本
        3.3 所有的分支，本质上就是指针
        3.4 默认就有一个 HEAD 指针永远指向当前指针

    4、分支命令           
        4.1. git branch                       查看所有分支
           (当前分支是绿色的，并且前面有朵白色小花)
        4.2. git branch 分支名                创建分支
        4.3. git checkout 分支名              切换分支
        4.4. git merge 分支名                 合并分支
        4.5. git branch -d register(分支名)   删除分支
        4.6. git checkout -b 分支名           创建并切换分支

    5、分支操作的目的：为了保证功能开发的独立性
        所以，一般开发一个复杂功能，会先新开一个分支，在分支中进行提交 
        等功能完成后，一次性合并到主分支



    五、分支冲突
    5.1  合并分两种情况
        // 如果当前分支是合并分支的祖辈分支，则可以进行快速合并
        // 如果不是祖辈分支，可能会产生冲突(两个分支修改了同一文件)  

    5.2  如果出现冲突，只能手动处理 

Day02
    一、github
    1、 克隆               git clone 远程仓库地址(文件夹名)
    2、 上传               git push 远程仓库地址 master(分支名)
    3、 同步(拉取          git pull
        远程仓库代码)
    4、 查看所有仓库变量    git remote                    
        给远程仓库取别名    git remote add 变量名 远程仓库地址 
        移除变量            git remote remove 变量名
        
        git clone的仓库默认有一个origin的别名

    二、letao项目
    1、准备工作
        开启mysql
        找到对应文件夹，shift加鼠标右键，输入npm start

    2、项目架构
        前后端

    3、项目内容
        xx-primary      深蓝色
        xx-default      灰白色
        xx-danger       红色
        xx-success      绿色 
        
        xx-info         浅蓝色
        xx-warning      黄色           

Day03
    一、登录页面校验
        更新当前input的校验状态, 更新成失败
            updateStatus
            参数1: filed  字段名称
            参数2: status 状态
                   NOT_VALIDATED(未校验), VALIDATING(校验中), INVALID(校验失败) or VALID(校验成功)
            参数3: validator 配置校验规则, 用来配置输出的提示信息
    二、进度条
        1、引包  NProgress
        2、进度条基本使用   
            NProgress.start(); 开启进度条
            NProgress.done(); 关闭进度条
        3、需求：
            3.1 当第一个ajax发送的时候，开启进度条
            3.2 当所有的ajax都完成后，关闭进度条

    三、ajax全局事件
        1、 .ajaxComplete() 每个ajax完成时调用(不管成功与否)    
        2、 .ajaxError()    每个ajax只要失败了就会调用
        3、 .ajaxSend()     每个ajax发送前调用
        4、 .ajaxSuccess()  每个ajax成功了就会调用

        5、 .ajaxStart()    当第一个ajax请求发送时调用
        6、 .ajaxStop()     当所有的ajax都完成后调用
    四、首页公共功能
        1、侧边栏
            lt_aside -> brand -> user -> nav
        2、右侧主体部分
        3、向左动画
        4、退出功能(模态框)
            (1) 点击退出按钮，显示模态框
            退出模态框:
                1.1 大小：
                    大：modal-log
                    中：默认
                    小：modal-sm
                1.2 给标签添加data-dismiss="modal"

            (2) 点击模态框的退出按钮，完成退出功能
        5、一进页面，先发送ajax请求，查询当前用户是否登录，如果没有登录，拦截到登录页

    五、首页主体部分
        1、数据可视化 
            echarts highcharts d3 ->(底层都是canvas) canvas
        2、cdn 内容分发网络
            可以让第三方的加载更快
            消耗的是别人服务器的资源，减轻自己服务器的压力
    
Day04    
    一、用户页面
        users.js: 一进入页面，发送ajax请求，请求列表数据，进行渲染（通过模板引擎）
        // 引包
        // 准备模板
            users.js 中：template(模板id, 数据对象), 在模板中可以任意使用传进去的对象中所有的属性
        
        // 纯前端图片预览 URL.createObjectURL  fileReader   

Day05
    一、商品管理页面
    
    二、手机端
         给你设计图，不依赖第三方ui框，纯自定制  用rem
         依赖于第三方ui框，使用流式布局（以功能实现为主）

        1、meta:vp 设置视口
        2、全屏容器
        3、三部分
        上下定位：fixed和absolute都可以
        头部：小图标推荐用定位，便于修改    
